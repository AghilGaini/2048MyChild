
class Utils
{
	
	static GenerateRandom()
	{
		return Math.random() < 0.3 ? 4 : 2;
	}
	
	static GenerateRandomWithMax(max)
	{
		return Math.floor(Math.random() * max);
	}
	
}

class My2048
{
	
	#mainArr; //for store main array info
	#emptyCells; //this store empty cells(0) indexes
	#rows; //rows of main array
	#cols; //cols of main array 
	#initializeValue; //initialize first value when object created
	#initializeRandomCount; //initialize first count for generate random number
	
	constructor(count,initializeValue,initializeRandomCount)
	{
		this.rows = count;
		this.cols = count;
		this.initializeValue = initializeValue;
		this.initializeRandomCount = initializeRandomCount;
		this.mainArr = new Array(this.rows).fill(initializeValue).map(() => new Array(this.cols).fill(initializeValue))
		this.emptyCells = [];
		
		this.ComputeEmptyCells();
		this.InitializeRandom();
	}
	
	FillAnEmptyCellWithRandomValue() //this method fill an empty cell(find randomlly) and fill it with random value
	{
		var emptyIndex = this.FindAnEmptyCellIndex();
		
		if(emptyIndex == -1)
			return; //ToDo
		
		var emptyValues = this.emptyCells[emptyIndex];
		var randomNumber = Utils.GenerateRandom();
		
		this.mainArr[emptyValues[0]][emptyValues[1]] = randomNumber;
		this.RemoveFromEmptyCells(emptyIndex);
	}
	
	RemoveFromEmptyCells(index) //this method remove passed index from emptyCells array
	{
		this.emptyCells.splice(index,1);
	}
	
	FindAnEmptyCellIndex() //this method return an index of empty cell (returned index is based on emptyCells array)
	{
		if(this.emptyCells.length <= 0)
			return -1;
		
		var randomCellNumber = Utils.GenerateRandomWithMax(this.emptyCells.length);
		
		return randomCellNumber;
	}
	
	ComputeEmptyCells() //this method is for find empty cells and fill emptyCells property
	{
		var i;
		var j;
		for(i=0;i<this.rows;i++)
		{
			for(j=0;j<this.cols;j++)
			{
				if(this.mainArr[i][j] == 0)
					this.emptyCells.push([i,j]);
			}	
		}
	}
	
	InitializeRandom() //this methis is for fill random cells at first
	{
		var i;
		for(i=0;i<this.initializeRandomCount;i++)
		{
			this.FillAnEmptyCellWithRandomValue();
		}
	}
	
	get info() //for log
	{
		console.log('rows : ' + this.rows
					+ '   / cols : ' + this.cols 
					+ '   / initial value : ' + this.initializeValue 
					+ '   / initial random count : ' + this.initializeRandomCount);
	}
	
	Move(direction)
	{
		switch(direction)
		{
			case 'R':
				this.MoveRight();
				break;
			case 'L' : 
				this.MoveLeft();
				break;
			case 'U' : 
				this.MoveUp();
				break;
			case 'D' : 
				this.MoveDown();
				break;
		}
		
		console.table(this.mainArr);
	}
	
	
	MoveRight()
	{
		this.ShiftRight();
		this.CollapseRight();
	}
	
	ShiftRight()
	{
		var i,j;
		
		for(i=0;i<this.rows;i++)//from start row
		{
			for(j=this.cols -1;j>=0;j--) //from last(right) col
			{
				if(this.mainArr[i][j] == 0 )
					continue;
				
				var res={};
				res.success = false;
				var temp = j-1;
				while(temp>=0)
				{
					
					if(this.mainArr[i][temp] != 0)
					{
						if(this.mainArr[i][j] == this.mainArr[i][temp])
						{
							res.success = true;
							res.source = [i,j];
							res.destination = [i,temp];
							break;
						}
						else
						{
							res.success = false;
						}
					}						
				
					temp--;
				}
				
				if(res.success == true)
				{
					this.mainArr[res.source[0]][res.source[1]] *=2;
					this.mainArr[res.destination[0]][res.destination[1]] = 0;
				}
				
			}
		}
		
	}
	
	CollapseRight()
	{
		var i,j;
		for(i=0;i<this.rows;i++)
		{
			for(j=this.cols -1;j>=0;j--)
			{
				if(this.mainArr[i][j] != 0)
					continue;
				else
				{
					this.PullRight([i,j]);
				}
			}
		}
	}
	
	PullRight(source)
	{
		var row = source[0];
		var col = source[1];
		
		while(col>0)
		{
			this.swap([row,col],[row,col-1]);
			col--;
		}
	}
	
	MoveLeft()
	{
		this.ShiftLeft();
		this.CollapseLeft();
	}
	
	ShiftLeft()
	{
		var i,j;
		
		for(i=0;i<this.rows;i++)//from start row
		{
			for(j=0;j<this.cols;j++) //from last(Left) col
			{
				if(this.mainArr[i][j] == 0 )
					continue;
				
				var res={};
				res.success = false;
				var temp = j+1;
				while(temp<this.cols)
				{
					
					if(this.mainArr[i][temp] != 0)
					{
						if(this.mainArr[i][j] == this.mainArr[i][temp])
						{
							res.success = true;
							res.source = [i,j];
							res.destination = [i,temp];
							break;
						}
						else
						{
							res.success = false;
						}	
					}											

					temp++;
				}
				
				if(res.success == true)
				{
					this.mainArr[res.source[0]][res.source[1]] *=2;
					this.mainArr[res.destination[0]][res.destination[1]] = 0;
				}
				
			}
		}
		
	}
	
	CollapseLeft()
	{
		var i,j;
		for(i=0;i<this.rows;i++)
		{
			for(j=0;j<this.cols;j++)
			{
				if(this.mainArr[i][j] != 0)
					continue;
				else
				{
					this.PullLeft([i,j])
				}
			}
		}
	}
	
	PullLeft(source)
	{
		var row = source[0];
		var col = source[1];
		
		while(col<this.cols)
		{
			this.swap([row,col],[row,col+1]);
			col++;
		}
	}
	
	MoveUp()
	{
		this.ShiftUp();
		this.CollapseUp();
	}
	
	ShiftUp()
	{
		var col,row;
		
		for(col=0;col<this.cols;col++)
		{
			for(row=0;row<this.rows;row++)
			{
				if(this.mainArr[row][col] == 0 )
					continue;
				
				var res={};
				res.success = false;
				var tempRow = row+1;
				
				while(tempRow<this.rows)
				{
					
					if(this.mainArr[tempRow][col] != 0)
					{
						if(this.mainArr[row][col] == this.mainArr[tempRow][col])
						{
							res.success = true;
							res.source = [row,col];
							res.destination = [tempRow,col];
							break;
						}
						else
						{
							res.success = false;
						}	
					}						
					
					
					tempRow++;
				}
				
				if(res.success == true)
				{
					this.mainArr[res.source[0]][res.source[1]] *=2;
					this.mainArr[res.destination[0]][res.destination[1]] = 0;
				}
			}
		}
	}
	
	CollapseUp()
	{
		var col,row;
		for(col=0;col<this.cols;col++)
		{
			for(row=0;row<this.cols;row++)
			{
				if(this.mainArr[row][col] != 0)
					continue;
				else
				{
					this.PullUp([row,col]);
				}
			}
		}
	}
	
	PullUp(source)
	{
		var row = source[0];
		var col = source[1];
		
		while(row<this.rows-1)
		{
			this.swap([row,col],[row+1,col]);
			row++;
		}
	}
	
	MoveDown()
	{
		this.ShiftDown();
		this.CollapseDown();
	}
	
	ShiftDown()
	{
		var col,row;
		
		for(col=0;col<this.cols;col++)
		{
			for(row=this.rows-1;row>=0;row--)
			{
				if(this.mainArr[row][col] == 0 )
					continue;
				
				var res={};
				res.success = false;
				var tempRow = row-1;
				
				while(tempRow>=0)
				{
					
					if(this.mainArr[tempRow][col] != 0)
					{
						if(this.mainArr[row][col] == this.mainArr[tempRow][col])
						{
							res.success = true;
							res.source = [row,col];
							res.destination = [tempRow,col];
							break;
						}
						else
						{
							res.success = false;
							break;
						}	
					}						
					
					
					tempRow--;
				}
				
				if(res.success == true)
				{
					this.mainArr[res.source[0]][res.source[1]] *=2;
					this.mainArr[res.destination[0]][res.destination[1]] = 0;
				}
			}
		}
	}
	
	CollapseDown()
	{
		var col,row;
		for(col=0;col<this.cols;col++)
		{
			for(row=this.rows-1;row>=0;row--)
			{
				if(this.mainArr[row][col] != 0)
					continue;
				else
				{	
					this.PullDown([row,col]);	
				}
			}
		}
	}
	
	PullDown(source)
	{
		var row = source[0];
		var col = source[1];
		
		while(row>0)
		{
			this.swap([row,col],[row-1,col]);
			row--;
		}
	}
	
	
	swap(source,destination)
	{
		var temp = this.mainArr[source[0]][source[1]];
		this.mainArr[source[0]][source[1]] = this.mainArr[destination[0]][destination[1]];
		this.mainArr[destination[0]][destination[1]] = temp;
	}
	
	
	CustomInitial()
	{
		this.mainArr =
		[
			[0,0,2,2],
			[2,2,4,4],
			[0,2,4,2],
			[2,2,0,2]
		];
	}
	
}

const count = 4;
const initializeValue = 0;
const initializeRandomCount = 4;


const My2048Instance = new My2048(count,initializeValue,initializeRandomCount);

// console.table(My2048Instance.mainArr);


